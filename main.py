import logging
import random
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from telegram.error import TelegramError
from colorlog import ColoredFormatter

TOKEN = "7239925662:AAHqJzk9AXcIRCNMt2SKb2gzQe1rHQIM32k"
CHANNEL_ID = "-1002211156231"
ADMIN_ID = 631336613
photo_expected = False


def setup_logger():
    handler = logging.StreamHandler()
    formatter = ColoredFormatter(
        "%(log_color)s%(asctime)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        log_colors={
            "DEBUG": "cyan",
            "INFO": "green",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "bold_red",
        },
    )

    handler.setFormatter(formatter)
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    return logger


logger = setup_logger()


async def start(update: Update, context):
    message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –ü—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è, –≤—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É."
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ")


async def send_custom_sticker(update: Update, context):
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        if context.args:
            sticker_id = context.args[0]

            try:
                await context.bot.send_sticker(chat_id=CHANNEL_ID, sticker=sticker_id)
                await update.message.reply_text("–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
            except TelegramError as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
            )
    else:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."
        )


async def info(update: Update, context):
    message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚ú® –Ø —Å–µ–∫—Ä–µ—Ç—É—Ç–∫–∞ –î–µ–Ω–∏—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –ª–∏—á–Ω–æ–º—É –∞–Ω–∞–ª—É (—Ç–∞–∫–∏–µ —à—É—Ç–∫–∏ —Ç—É—Ç –º–æ–∂–Ω–æ) ‚Äî –º–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞. "
        "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –µ—Å—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /join_request . üéâ\n"
        "2Ô∏è‚É£ –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –î–µ–Ω–∏—Å—É. üë®‚Äçüíº\n"
        "3Ô∏è‚É£ –ï—Å–ª–∏ –î–µ–Ω–∏—Å—É –≤–∞—à –º–µ–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –∫–∞–Ω–∞–ª—É! üö™\n"
        "4Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! üíÅ‚Äç‚ôÄÔ∏è\n\n"
        "–£–¥–∞—á–∏, –∏ –ø–æ–ø—É—Ç–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞ –≤ —Å—Ä–∞–∫—É! üòä"
    )
    await update.message.reply_text(message)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–∞"
    )


async def get_channel_info(context):
    try:
        chat = await context.bot.get_chat(CHANNEL_ID)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {chat}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")


async def join_request(update: Update, context):
    global photo_expected
    photo_expected = True
    await get_channel_info(context)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–∏–ª—ã–π! –ó–∞ –≤—Ö–æ–¥ –Ω–∞–¥–æ –ø–ª–∞—Ç–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–º–µ—à–Ω–æ–π –º–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏."
    )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


async def coffee(update: Update, context):
    options = [
        "https://www.youtube.com/watch?v=7XXu_-eoxHo",
        "https://www.youtube.com/watch?v=JxhvP1Mq9Gs",
        "https://www.youtube.com/watch?v=wxtvI_1i7V0",
    ]
    selected_media = random.choice(options)
    await context.bot.send_message(update.message.chat_id, selected_media)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è YouTube —Å—Å—ã–ª–∫–∞"
    )


async def handle_message(update: Update, context):
    message = update.message
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if photo_expected:
        if message.photo:
            photo_id = message.photo[-1].file_id
            logger.debug(f"–§–æ—Ç–æ ID: {photo_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            keyboard = [
                [InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")],
                [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_photo(
                ADMIN_ID,
                photo_id,
                caption=f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                reply_markup=reply_markup,
            )
            logger.info(f"–§–æ—Ç–æ –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}")
            photo_expected = False
        else:
            await message.reply_text("–≠—Ç–æ –Ω–µ –º–µ–º!!!! (‚ï¨‡≤†Áõä‡≤†)\n\n–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞!")
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–æ—Ç–æ –∞ –Ω–∞–ø–∏—Å–∞–ª: '{message.text}'"
            )


async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()

    if "approve_" in query.data:
        user_id = query.data.split("_")[1]
        logger.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            invite_link = await context.bot.create_chat_invite_link(CHANNEL_ID)
            await context.bot.send_message(
                user_id,
                f"–ë—ã–ª–æ —Å–º–µ—à–Ω–æ (–∏–ª–∏ –≤–æ–∑–±—É–∂–¥–∞—é—â–µ). –ü—Ä–æ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ!: {invite_link.invite_link}",
            )
            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω!")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    elif "reject_" in query.data:
        user_id = query.data.split("_")[1]
        logger.info(f"–û—Ç–∫–∞–∑ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        try:
            await context.bot.send_message(user_id, "–¢–≤–æ–π –º–µ–º –Ω–µ —Å–º–µ—à–Ω–æ–π! (¬¨_¬¨ )")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ")
            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–∫–∞–∑–∞–Ω–æ!")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("sendsticker", send_custom_sticker))
    application.add_handler(CommandHandler("join_request", join_request))
    application.add_handler(CommandHandler("coffee", coffee))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(MessageHandler(~filters.PHOTO, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    application.run_polling()


if __name__ == "__main__":
    main()
