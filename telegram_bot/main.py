'''
–•–æ—Ç–µ–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ—É–µ–∫—Ü–∏–æ–Ω–∞–ª - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–∞—Ä—Å–∏–Ω–≥, –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –ø—Ä–æ–º–ø—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
–ü–æ–∫–∞ —á—Ç–æ
–ü–æ–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ä–∞–≥ –Ω–µ–≥–¥–µ :)
'''
import requests
import json
import logging
import random
import asyncio
import re
import os
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import TelegramError
from colorlog import ColoredFormatter
from ollama import AsyncClient
from datetime import datetime

TOKEN = "7239925662:AAHqJzk9AXcIRCNMt2SKb2gzQe1rHQIM32k"
CHANNEL_ID = "-1002211156231"
ADMIN_ID = 631336613
global photo_expected, sticker_expected
photo_expected = False
sticker_expected = False
ollama_base_url = os.getenv("OLLAMA_BASE_URL")
LLM_NAME = os.getenv("LLM")
client = AsyncClient(host=ollama_base_url)

waiting_phrases = [
    "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–∂–µ—á–∫–æ, —è –ø–æ–¥—É–º–∞—é... üå∏",
    "–ß—É—Ç–æ—á–∫—É —Ç–µ—Ä–ø–µ–Ω–∏—è, –º–æ–π –¥–æ—Ä–æ–≥–æ–π! üíñ",
    "–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞, —Å–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ! üòä",
    "–î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É, —è –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–±—è! ‚ú®",
    "–û–∂–∏–¥–∞–π, —Å–∫–æ—Ä–æ —è —Ç–µ–±—è —É–¥–∏–≤–ª—é! üåü",
    "–ß—É–¥–µ—Å–∞ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ —Å–∫—É—á–∞–π! üê∞",
    "–ü–æ–∫–∞ —Ç—ã –∂–¥–µ—à—å, –ø—Ä–µ–¥—Å—Ç–∞–≤—å, –∫–∞–∫ —è —É–ª—ã–±–∞—é—Å—å! üòÑ"
]

SYSTEM_PROMPT = "Here you play the role of a cute secretary anime-girl. \
    Only if someone ASKS how get into channel (self life-channel of Denis), \
        say that you need to click on the /join_request command or /info for instruction. \
            Otherwise you can use cute smileys in your answer, joke and tell other stories. Answer only in Russian!"


def setup_logger():
    handler = logging.StreamHandler()
    formatter = ColoredFormatter(
        "%(log_color)s%(asctime)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        log_colors={
            "DEBUG": "cyan",
            "INFO": "green",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "bold_red",
        },
    )

    handler.setFormatter(formatter)
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    return logger


logger = setup_logger()


async def start(update: Update, context):
    message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –ü—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è, –≤—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É."
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ")


async def send_sticker_request(update: Update, context):
    global sticker_expected
    sticker_expected = True
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä.")
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∏–∫–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")


async def handle_sticker(update: Update, context):
    global sticker_expected
    message = update.message
    user_id = message.from_user.id
    if user_id == ADMIN_ID:
        if sticker_expected:
            if message.sticker:
                sticker_id = message.sticker.file_id
                logger.info(
                    f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä ID: {sticker_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.username}"
                )
                await context.bot.send_sticker(CHANNEL_ID, sticker_id)
                logger.info(
                    f"–°—Ç–∏–∫–µ—Ä –æ—Ç {message.chat.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}"
                )
                sticker_expected = False
            else:
                await message.reply_text(
                    "–≠—Ç–æ –Ω–µ —Å—Ç–∏–∫–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—Ç–∏–∫–µ—Ä."
                )
                logger.warning(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Å—Ç–∏–∫–µ—Ä."
                )
        else:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendsticker."
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞."
            )


async def info(update: Update, context):
    message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚ú® –Ø —Å–µ–∫—Ä–µ—Ç—É—Ç–∫–∞ –î–µ–Ω–∏—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –ª–∏—á–Ω–æ–º—É –∞–Ω–∞–ª—É (—Ç–∞–∫–∏–µ —à—É—Ç–∫–∏ —Ç—É—Ç –º–æ–∂–Ω–æ) ‚Äî –º–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞. "
        "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –µ—Å—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /join_request . üéâ\n"
        "2Ô∏è‚É£ –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –î–µ–Ω–∏—Å—É. üë®‚Äçüíº\n"
        "3Ô∏è‚É£ –ï—Å–ª–∏ –î–µ–Ω–∏—Å—É –≤–∞—à –º–µ–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –∫–∞–Ω–∞–ª—É! üö™\n"
        "4Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! üíÅ‚Äç‚ôÄÔ∏è\n\n"
        "–£–¥–∞—á–∏, –∏ –ø–æ–ø—É—Ç–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞ –≤ —Å—Ä–∞–∫—É! üòä"
    )
    await update.message.reply_text(message)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–∞"
    )


async def get_channel_info(context):
    try:
        chat = await context.bot.get_chat(CHANNEL_ID)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {chat}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")


async def join_request(update: Update, context):
    global photo_expected
    photo_expected = True
    await get_channel_info(context)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–∏–ª—ã–π! –ó–∞ –≤—Ö–æ–¥ –Ω–∞–¥–æ –ø–ª–∞—Ç–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–º–µ—à–Ω–æ–π –º–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏."
    )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


async def coffee(update: Update, context):
    options = [
        "https://www.youtube.com/watch?v=7XXu_-eoxHo",
        "https://www.youtube.com/watch?v=JxhvP1Mq9Gs",
        "https://www.youtube.com/watch?v=wxtvI_1i7V0",
        "https://www.youtube.com/watch?v=WB_eq5uS0A0&ab_channel=SamuraiGirlD%27n%27B",
        "https://www.youtube.com/watch?v=8hx4qiOGgDE&ab_channel=PhonkDemon",
        "https://www.youtube.com/watch?v=A7WZhoGRjMI&ab_channel=Mr_MoMoMusic",
        "https://www.youtube.com/watch?v=EtD7_8kCMHA&ab_channel=Deebu",
        "https://www.youtube.com/watch?v=qvZsPYOrmh0&t=1s&ab_channel=HiddenbyLeaves",
    ]
    selected_media = random.choice(options)
    await context.bot.send_message(update.message.chat_id, selected_media)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è YouTube —Å—Å—ã–ª–∫–∞"
    )


async def handle_message(update: Update, context):
    global photo_expected
    message = update.message
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.username}")

    if photo_expected:
        if message.photo:
            photo_id = message.photo[-1].file_id
            logger.debug(f"–§–æ—Ç–æ ID: {photo_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.username}")

            keyboard = [
                [InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")],
                [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_photo(
                ADMIN_ID,
                photo_id,
                caption=f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.username}",
                reply_markup=reply_markup,
            )
            logger.info(
                f"–§–æ—Ç–æ –æ—Ç {message.chat.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}"
            )
            photo_expected = False
        else:
            await message.reply_text("–≠—Ç–æ –Ω–µ –º–µ–º!!!! (‚ï¨‡≤†Áõä‡≤†)\n\n–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞!")
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–æ—Ç–æ –∞ –Ω–∞–ø–∏—Å–∞–ª: '{message.text}'"
            )
    else:
        await message.reply_text("–ù–µ –ø–æ–π–º—É, —à–æ —Ç—ã —Ö–æ—á–µ—à—å, –¥–æ—Ä–æ–≥–æ–π! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É...")


async def button_handler(update: Update, context):
    query = update.callback_query
    user_name = update.message.chat.username
    await query.answer()

    if "approve_" in query.data:
        user_id = query.data.split("_")[1]
        logger.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        try:
            invite_link = await context.bot.create_chat_invite_link(CHANNEL_ID)
            await context.bot.send_message(
                user_id,
                f"–ë—ã–ª–æ —Å–º–µ—à–Ω–æ (–∏–ª–∏ –≤–æ–∑–±—É–∂–¥–∞—é—â–µ). –ü—Ä–æ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ!: {invite_link.invite_link}",
            )
            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ–¥–æ–±—Ä–µ–Ω!")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}: {e}")

    elif "reject_" in query.data:
        user_id = query.data.split("_")[1]
        logger.info(f"–û—Ç–∫–∞–∑ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")

        try:
            await context.bot.send_message(user_id, "–¢–≤–æ–π –º–µ–º –Ω–µ —Å–º–µ—à–Ω–æ–π! (¬¨_¬¨ )")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ")
            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} –æ—Ç–∫–∞–∑–∞–Ω–æ!")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}: {e}")


# async def llama_chat(user_message):
#     response = await client.chat(
#         model=LLM_NAME,
#         messages=[
#             {
#                 "role": "system",
#                 "content": SYSTEM_PROMPT,
#             },
#             {"role": "user", "content": user_message},
#         ],
#         stream=False,
#     )

#     return response['message']['content']

async def llama_chat(user_message, history, use_rag=False):
    url = "http://api:8504/query"
    if use_rag:
        url = "http://api:8504/query-stream"

    try:
        url = "http://api:8504/query"
        params = {
            "text": user_message,
            "history": history,
            "rag": use_rag
        }
        response = requests.get(url, params=params)
        response.raise_for_status()

        if use_rag:
            result = ""
            for line in response.iter_lines():
                if line:
                    try:
                        decoded_line = line.decode('utf-8').strip()
                        if decoded_line.startswith("data:"):
                            decoded_line = decoded_line[len("data:"):].strip()

                        data = json.loads(decoded_line)
                        if "token" in data:
                            result += data["token"]
                    except json.JSONDecodeError:
                        logger.error(f"Failed to decode JSON from stream: {line}")
            return {"result": result}
        else:
            return response.json()["result"]
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP error occurred: {http_err}")
        return {"error": f"HTTP error: {http_err}"}
    except requests.exceptions.RequestException as req_err:
        logger.error(f"Request error occurred: {req_err}")
        return {"error": f"Request error: {req_err}"}
    except ValueError as json_err:
        logger.error(f"JSON decode error: {json_err}")
        return {"error": "Failed to decode JSON from response."}


async def start_talk(update: Update, context: ContextTypes.DEFAULT_TYPE, use_rag=False):
    user_name = update.message.chat.username
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ /talk")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç–∏–∫–∏! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é —Ç–µ–±—è, –µ–±–∞–ª–æ –æ—Å–ª–∏–Ω–æ–µ.")
    context.user_data['in_talk'] = True
    context.user_data['last_message_time'] = datetime.now()
    context.user_data['message_history'] = []
    context.user_data['use_rag'] = use_rag

async def stop_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.chat.username
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ /stop_talk")
    await update.message.reply_text("–ü–æ–∫–∞-–ø–æ–∫–∞ ^-^.")
    context.user_data['in_talk'] = False
    context.user_data['last_message_time'] = datetime.now()
    context.user_data['message_history'] = []

async def handle_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('in_talk'):
        user_name = update.message.chat.username
        text = update.message.text
        context.user_data['last_message_time'] = datetime.now()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {text}")
        # waiting_message = random.choice(waiting_phrases)
        # await update.message.reply_text(waiting_message)

        message_history = context.user_data.get('message_history', [])
        context.user_data['message_history'] = message_history
        # formatted_history = "\n".join(message_history)
        full_response = await llama_chat(text, message_history, use_rag=context.user_data['use_rag'])
        ck_response = f"assistant: {full_response}"
        user_replic = f"question: {text}"
        logger.warning(ck_response)
        message_history.append("\n".join([user_replic, ck_response]))
        if len(message_history) > 5:
            message_history.pop(0)
        context.user_data['message_history'] = message_history
        words = full_response.split()
        message_parts = []
        chunk = []
        total_words = 0

        for word in words:
            chunk.append(word)
            total_words += 1
            if total_words >= 50 and re.search(r'[.!?]', word):
                message_parts.append(' '.join(chunk))
                chunk = []
                total_words = 0
        if chunk:
            message_parts.append(' '.join(chunk))
        for part in message_parts:
            await update.message.reply_text(part)
            await asyncio.sleep(1)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass

# async def upload_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_name = update.message.chat.username
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–≥—Ä—É–∑–∏–ª PDF –¥–æ–∫—É–º–µ–Ω—Ç")
#     file = await context.bot.get_file(update.message.document.file_id)
#     with tempfile.NamedTemporaryFile(delete=True) as temp:
#         await file.download_to_drive(temp.name)
#         # Here you can add code to process the PDF document using your API
#         await update.message.reply_text("PDF –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("sendsticker", send_sticker_request))
    application.add_handler(CommandHandler("join_request", join_request))
    application.add_handler(CommandHandler("coffee", coffee))
    application.add_handler(CommandHandler("talk", start_talk))
    application.add_handler(CommandHandler("talk_rag", start_talk))
    application.add_handler(CommandHandler("stop_talk", stop_talk))
    # application.add_handler(CommandHandler("upload_pdf", upload_pdf))

    application.add_handler(MessageHandler(filters.TEXT, handle_talk))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    # job_queue = application.job_queue
    # job_queue.run_repeating(check_inactive_sessions, interval=100)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    application.run_polling()

if __name__ == "__main__":
    main()